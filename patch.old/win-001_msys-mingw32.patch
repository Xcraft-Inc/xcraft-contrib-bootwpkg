diff --git a/wpkg/CMakeLists.txt b/wpkg/CMakeLists.txt
index c075b28..1911878 100644
--- a/wpkg/CMakeLists.txt
+++ b/wpkg/CMakeLists.txt
@@ -52,7 +52,7 @@ set( WPKG_VENDOR m2osw )
 #===============================================================================
 # Detect system particulars
 #
-add_definitions( -DCMAKE_SYSTEM_NAME=\"${CMAKE_SYSTEM_NAME}\" -D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -DNTDDI_VERSION=0x06000000 -D_WIN32_IE=0x0800 )
+add_definitions( -DCMAKE_SYSTEM_NAME=\"${CMAKE_SYSTEM_NAME}\" -D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -D_WIN32_IE=0x0800 )
 if( UNIX )
     if( CMAKE_SYSTEM_NAME MATCHES Linux )
         set( WPKG_OS linux )
@@ -124,7 +124,7 @@ elseif( MSVC )
     set( MO_WINDOWS TRUE )
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS" )
     set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS" )
-elseif( MINGW32 )
+elseif( MINGW32 OR MSYS )
     set( WPKG_PROCESSOR i386 )
     set( WPKG_OS mingw32 )
     # WIN_MACHINE_FLAGS cannot be empty and since cmake adds -fPIC under
@@ -131,7 +131,7 @@ elseif( MINGW32 )
     # our feet, that makes no difference at this point...
     set( WIN_MACHINE_FLAGS "-fPIC" )
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x" )
-    add_definitions( -DMO_WINDOWS -DMO_MINGW32 )
+    add_definitions( -DMO_WINDOWS -DMO_MINGW32 -DCONNECT_COMMANDLINE=2048 )
     set( MO_WINDOWS TRUE )
     set( MO_MINGW32 TRUE )
 else()
diff --git a/wpkg/libdebpackages/CMakeLists.txt b/wpkg/libdebpackages/CMakeLists.txt
index 2b96c89..45cde35 100644
--- a/wpkg/libdebpackages/CMakeLists.txt
+++ b/wpkg/libdebpackages/CMakeLists.txt
@@ -45,9 +45,9 @@ if( MSVC )
     # disable warnings about dll linkage concerns but we do not have any inlines (warning 4251)
     set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251" )
 endif( MSVC )
-if( MSVC OR MINGW32 )
+if( MSVC OR MINGW32 OR MSYS )
     set ( EXTRA_LIBRARIES wsock32 ws2_32 mpr ole32 uuid )
-endif( MSVC OR MINGW32 )
+endif( MSVC OR MINGW32 OR MSYS )
 
 file( GLOB LIBDEBPACKAGES_INCLUDE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/libdebpackages/*.h" )
 
@@ -169,7 +169,7 @@ add_library( ${PROJECT_NAME} SHARED
     ${LIBDEBPACKAGES_SOURCE_FILES}
 )
 
-if( MSVC OR MINGW32 )
+if( MSVC OR MINGW32 OR MSYS )
     set_target_properties( ${PROJECT_NAME} PROPERTIES
         COMPILE_FLAGS -DDEBIAN_PACKAGE_DLL
         LINK_FLAGS ${WIN_MACHINE_FLAGS}
diff --git a/wpkg/tools/CMakeLists.txt b/wpkg/tools/CMakeLists.txt
index 41bb7a6..13c095a 100644
--- a/wpkg/tools/CMakeLists.txt
+++ b/wpkg/tools/CMakeLists.txt
@@ -264,11 +264,11 @@ target_link_libraries( ${PROJECT_NAME}
     wpkg_tld_static
 )
 
-if( MINGW32 )
+if( MINGW32 OR MSYS )
     # The -static-... flags do not seem to have an effect at this point
     # (I also tried with just -static and the C & C++ libraries are still added!)
-    set_target_properties(wpkg PROPERTIES LINK_FLAGS "-municode -static-libgcc -static-libstdc++" )
-endif( MINGW32 )
+    set_target_properties(wpkg PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++" )
+endif( MINGW32 OR MSYS )
 
 install(
     TARGETS ${PROJECT_NAME}
diff --git a/wpkg/tools/wpkg.cpp b/wpkg/tools/wpkg.cpp
index 46122cc..857c5d3 100644
--- a/wpkg/tools/wpkg.cpp
+++ b/wpkg/tools/wpkg.cpp
@@ -7228,6 +7228,44 @@ int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLin
     argv.push_back(NULL);
     return utf8_main(argc, &argv[0]);
 }
+
+// This implementation comes from: https://github.com/coderforlife/mingw-unicode-main
+int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR _lpCmdLine, int nCmdShow)
+{
+    WCHAR *lpCmdLine = GetCommandLineW();
+    if(__argc == 1)
+    { // avoids GetCommandLineW bug that does not always quote the program name if no arguments
+      do
+      {
+          ++lpCmdLine;
+      }
+      while(*lpCmdLine);
+    }
+    else
+    {
+        BOOL quoted = lpCmdLine[0] == L'"';
+        ++lpCmdLine; // skips the " or the first letter (all paths are at least 1 letter)
+        while(*lpCmdLine)
+        {
+            if(quoted && lpCmdLine[0] == L'"')
+            {
+                quoted = FALSE;
+            } // found end quote
+            else if(!quoted && lpCmdLine[0] == L' ')
+            {
+                // found an unquoted space, now skip all spaces
+                do
+                {
+                    ++lpCmdLine;
+                }
+                while(lpCmdLine[0] == L' ');
+                break;
+            }
+            ++lpCmdLine;
+        }
+    }
+    return wWinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow);
+}
 #endif
 
 
