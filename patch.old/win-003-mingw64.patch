From 1f876fe465809ee667bc5e6cebd98f61a18689d0 Mon Sep 17 00:00:00 2001
From: Yevgeny Krasovsky <jkrasovsky@gmail.com>
Date: Wed, 29 Oct 2014 07:40:56 +0000
Subject: [PATCH 1/5] Added support for MinGW 64-bit toolchain. - Reworked
 CMake files replacing MINGW32 with MINGW according to
 http://www.cmake.org/Wiki/CMake_Useful_Variables. - Replaced all MO_MINGW32
 occurrences with MO_MINGW. - Enhanced compiler architecture detection. -
 Changed mingw32 OS type to mswindows for MINGW builds. - Added _WINDOWS
 compiler definition since there is at least one header file which rely on it.

---
 wpkg/CMakeLists.txt                              | 44 +++++++++++++-----------
 wpkg/dev/mingw32-toolchain.cmake                 |  4 +--
 wpkg/libdebpackages/CMakeLists.txt               |  6 ++--
 wpkg/libdebpackages/libdebpackages/wpkg_output.h |  2 +-
 wpkg/libdebpackages/strptime.c                   |  4 +--
 wpkg/libdebpackages/wpkg_filename.cpp            | 15 ++++----
 wpkg/libdebpackages/wpkg_output.cpp              |  2 +-
 wpkg/libtld/CMakeLists.txt                       |  2 +-
 wpkg/tools/CMakeLists.txt                        |  4 +--
 wpkg/tools/wpkg.cpp                              |  6 ++--
 10 files changed, 44 insertions(+), 45 deletions(-)

diff --git a/wpkg/CMakeLists.txt b/wpkg/CMakeLists.txt
index 842d10c..2226de9 100644
--- a/wpkg/CMakeLists.txt
+++ b/wpkg/CMakeLists.txt
@@ -53,6 +53,19 @@ set( WPKG_VENDOR m2osw )
 # Detect system particulars
 #
 add_definitions( -DCMAKE_SYSTEM_NAME=\"${CMAKE_SYSTEM_NAME}\" -D_WIN32_WINNT=0x0600 -DWINVER=0x0600 -D_WIN32_IE=0x0800 )
+
+if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+    message( STATUS "64-bit compiler detected" )
+    set( WPKG_PROCESSOR amd64 )
+else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+    if( CMAKE_SIZEOF_VOID_P EQUAL 4 )
+        message( STATUS "32-bit compiler detected" )
+        set( WPKG_PROCESSOR i386 )
+    else( CMAKE_SIZEOF_VOID_P EQUAL 4 )
+        message( FATAL_ERROR "Can't detect architecture with sizeof(void) = '${CMAKE_SIZEOF_VOID_P}'" )
+    endif( CMAKE_SIZEOF_VOID_P EQUAL 4 )
+endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )
+
 if( UNIX )
     if( CMAKE_SYSTEM_NAME MATCHES Linux )
         set( WPKG_OS linux )
@@ -78,14 +91,6 @@ if( UNIX )
     else()
         message( FATAL_ERROR "Unix-like platform '${CMAKE_SYSTEM_NAME}' not supported!" )
     endif()
-    execute_process( COMMAND uname -m OUTPUT_VARIABLE ARCH OUTPUT_STRIP_TRAILING_WHITESPACE )
-    if( (${ARCH} MATCHES i386) OR (${ARCH} MATCHES i686) )
-        set( WPKG_PROCESSOR i386 )
-    else( ${ARCH} MATCHES x86_64 )
-        set( WPKG_PROCESSOR amd64 )
-    else()
-        message( FATAL_ERROR "Unknown architecture '${ARCH}'!" )
-    endif()
     if( DEFINED ENV{WPKG_COVERAGE} )
         set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -O0 -Werror -Wall -Wextra -pedantic -std=gnu++0x -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Winit-self -Wlogical-op -Wmissing-include-dirs -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=1 -Wundef -Wno-unused -Wunused-variable -Wno-variadic-macros -Wno-parentheses -Wno-unknown-pragmas -Wwrite-strings -Wswitch -fdiagnostics-show-option -fprofile-arcs -ftest-coverage" )
         if( NOT MO_CYGWIN AND NOT MO_SUNOS )
@@ -114,26 +119,23 @@ if( UNIX )
 elseif( MSVC )
     set( WPKG_OS mswindows )
     if( CMAKE_CL_64 )
-        set( WPKG_PROCESSOR amd64 )
         set( WIN_MACHINE_FLAGS "/MACHINE:X64" )
     else()
-        set( WPKG_PROCESSOR i386 )
         set( WIN_MACHINE_FLAGS "/MACHINE:X86" )
     endif()
-    add_definitions( -DMO_WINDOWS )
+    add_definitions( -DMO_WINDOWS -D_WINDOWS )
     set( MO_WINDOWS TRUE )
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS" )
     set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS" )
-elseif( MINGW32 OR MSYS )
-    set( WPKG_PROCESSOR i386 )
-    set( WPKG_OS mingw32 )
+elseif( MINGW OR MSYS )
+    set( WPKG_OS mswindows )
     # WIN_MACHINE_FLAGS cannot be empty and since cmake adds -fPIC under
     # our feet, that makes no difference at this point...
     set( WIN_MACHINE_FLAGS "-fPIC" )
     set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x" )
-    add_definitions( -DMO_WINDOWS -DMO_MINGW32 -DCONNECT_COMMANDLINE=2048 )
+    add_definitions( -DMO_WINDOWS -D_WINDOWS -DMO_MINGW -DCONNECT_COMMANDLINE=2048 )
     set( MO_WINDOWS TRUE )
-    set( MO_MINGW32 TRUE )
+    set( MO_MINGW TRUE )
 else()
     message( FATAL_ERROR "Platform not supported!" )
 endif()
@@ -180,9 +182,9 @@ add_subdirectory( libutf8            )
 add_subdirectory( libexpr            )
 add_subdirectory( libdebpackages     )
 add_subdirectory( tools              )
-if( NOT MINGW32 )
+#if( NOT MINGW )
     add_subdirectory( tests/unittests    )
-endif()
+#endif()
 add_subdirectory( documentation      )

 install(
@@ -196,10 +198,10 @@ install(
 # Create a target which generates the changelog gzip file.
 # Note: you specify "wpkg" as the tool since it is also a cmake target. add_custom_command() understands CMake generated targets.
 #
-#if( MO_MINGW32 )
+#if( MO_MINGW )
 ## running wpkg doesn't work when cross compiling; use file as is for now
 #set( CHANGELOG_OUTPUT_FILE "${PROJECT_SOURCE_DIR}/ChangeLog" )
-#else( MO_MINGW32 )
+#else( MO_MINGW )
 #set( CHANGELOG_INPUT_FILE  "${PROJECT_SOURCE_DIR}/ChangeLog"           )
 #set( CHANGELOG_OUTPUT_FILE "${PROJECT_BINARY_DIR}/changelog.Debian.gz" )
 #add_custom_command(
@@ -208,7 +210,7 @@ install(
 #    DEPENDS "${CHANGELOG_INPUT_FILE}"
 #)
 #add_custom_target( changelog ALL DEPENDS "${CHANGELOG_OUTPUT_FILE}" )
-#endif( MO_MINGW32 )
+#endif( MO_MINGW )

 #install(
 #    FILES
diff --git a/wpkg/dev/mingw32-toolchain.cmake b/wpkg/dev/mingw32-toolchain.cmake
index 74f28f8..002dc02 100644
--- a/wpkg/dev/mingw32-toolchain.cmake
+++ b/wpkg/dev/mingw32-toolchain.cmake
@@ -12,5 +12,5 @@ INCLUDE( CMakeForceCompiler )
 CMAKE_FORCE_C_COMPILER( ${GNU_HOST}-gcc GNU )
 SET( CMAKE_RC_COMPILER ${GNU_HOST}-windres )

-# So other cmake scripts can detect this is MINGW32
-SET( MINGW32 TRUE )
+# So other cmake scripts can detect this is MINGW
+SET( MINGW TRUE )
diff --git a/wpkg/libdebpackages/CMakeLists.txt b/wpkg/libdebpackages/CMakeLists.txt
index 45cde35..2f48fe9 100644
--- a/wpkg/libdebpackages/CMakeLists.txt
+++ b/wpkg/libdebpackages/CMakeLists.txt
@@ -45,9 +45,9 @@ if( MSVC )
     # disable warnings about dll linkage concerns but we do not have any inlines (warning 4251)
     set ( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4251" )
 endif( MSVC )
-if( MSVC OR MINGW32 OR MSYS )
+if( MSVC OR MINGW OR MSYS )
     set ( EXTRA_LIBRARIES wsock32 ws2_32 mpr ole32 uuid )
-endif( MSVC OR MINGW32 OR MSYS )
+endif( MSVC OR MINGW OR MSYS )

 file( GLOB LIBDEBPACKAGES_INCLUDE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/libdebpackages/*.h" )

@@ -169,7 +169,7 @@ add_library( ${PROJECT_NAME} SHARED
     ${LIBDEBPACKAGES_SOURCE_FILES}
 )

-if( MSVC OR MINGW32 OR MSYS )
+if( MSVC OR MINGW OR MSYS )
     set_target_properties( ${PROJECT_NAME} PROPERTIES
         COMPILE_FLAGS -DDEBIAN_PACKAGE_DLL
         LINK_FLAGS ${WIN_MACHINE_FLAGS}
diff --git a/wpkg/libdebpackages/libdebpackages/wpkg_output.h b/wpkg/libdebpackages/libdebpackages/wpkg_output.h
index ac3faa5..1e04e50 100644
--- a/wpkg/libdebpackages/libdebpackages/wpkg_output.h
+++ b/wpkg/libdebpackages/libdebpackages/wpkg_output.h
@@ -236,7 +236,7 @@ public:
     log& arg(const unsigned int v);
     log& arg(const signed long v);
     log& arg(const unsigned long v);
-#if defined(MO_WINDOWS) && defined(_WIN64) && !defined(MO_MINGW32)
+#if defined(MO_WINDOWS) && defined(_WIN64)
     log& arg(const size_t v);
 #endif
     log& arg(const float v);
diff --git a/wpkg/libdebpackages/strptime.c b/wpkg/libdebpackages/strptime.c
index da7caff..ef16bde 100644
--- a/wpkg/libdebpackages/strptime.c
+++ b/wpkg/libdebpackages/strptime.c
@@ -121,7 +121,7 @@ static const u_char *conv_num(const unsigned char *, int *, uint, uint);
 static const u_char *find_string(const u_char *, int *, const char * const *,
   const char * const *, int);

-#ifndef MO_MINGW32
+#ifndef MO_MINGW
 static int strncasecmp(const char *a, const char *b, size_t c);
 #endif

@@ -630,7 +630,7 @@ find_string(const u_char *bp, int *tgt, const char * const *n1,
   return NULL;
 }

-#ifndef MO_MINGW32
+#ifndef MO_MINGW
 static int
 strncasecmp(const char *a, const char *b, size_t c)
 {
diff --git a/wpkg/libdebpackages/wpkg_filename.cpp b/wpkg/libdebpackages/wpkg_filename.cpp
index e73ea82..db36be2 100644
--- a/wpkg/libdebpackages/wpkg_filename.cpp
+++ b/wpkg/libdebpackages/wpkg_filename.cpp
@@ -48,10 +48,6 @@
 //          with their headers and backward compatibility.)
 #include    "libdebpackages/tcp_client_server.h"

-#include    "libdebpackages/wpkg_filename.h"
-#include    "libdebpackages/wpkg_util.h"
-#include    "libdebpackages/case_insensitive_string.h"
-#include    "libdebpackages/compatibility.h"
 #include    <algorithm>
 #include    <sstream>
 #include    <errno.h>
@@ -71,6 +67,11 @@
 #   include <netdb.h>
 #endif

+#include    "libdebpackages/wpkg_filename.h"
+#include    "libdebpackages/wpkg_util.h"
+#include    "libdebpackages/case_insensitive_string.h"
+#include    "libdebpackages/compatibility.h"
+

 /** \brief Declarations and implementation of filename related functions.
  *
@@ -3660,11 +3661,7 @@ void uri_filename::os_symlink(const uri_filename& destination) const
  */
 bool uri_filename::os_rename(const uri_filename& destination, bool ignore_errors) const
 {
-#if defined(MO_MINGW32)
-    if(_wrename(os_filename().get_os_string().c_str(), destination.os_filename().get_os_string().c_str()) != 0)
-#else
     if(rename(os_filename().get_os_string().c_str(), destination.os_filename().get_os_string().c_str()) != 0)
-#endif
     {
         if(!ignore_errors)
         {
@@ -3925,7 +3922,7 @@ uri_filename uri_filename::get_cwd()
 {
     wpkg_filename::uri_filename::os_filename_t cwd("...undefined folder...");
     wpkg_filename::uri_filename::os_char_t buf[32 * 1024]; // limit is 32Kb under MS-Windows
-#if defined(MO_MINGW32)
+#if defined(MO_MINGW)
     if(GetCurrentDirectoryW(sizeof(buf) / sizeof(buf[0]), buf) == 0)
 #else
     if(::getcwd(buf, sizeof(buf) / sizeof(buf[0])) != NULL)
diff --git a/wpkg/libdebpackages/wpkg_output.cpp b/wpkg/libdebpackages/wpkg_output.cpp
index f345089..924a9d1 100644
--- a/wpkg/libdebpackages/wpkg_output.cpp
+++ b/wpkg/libdebpackages/wpkg_output.cpp
@@ -1598,7 +1598,7 @@ log& log::arg(const unsigned long v)
 }


-#if defined(MO_WINDOWS) && defined(_WIN64) && !defined(MO_MINGW32)
+#if defined(MO_WINDOWS) && defined(_WIN64)
 /** \brief Replace an argument with the size_t value.
  *
  * This function replaces an argument in the format string with the
diff --git a/wpkg/libtld/CMakeLists.txt b/wpkg/libtld/CMakeLists.txt
index d2abd69..7741293 100644
--- a/wpkg/libtld/CMakeLists.txt
+++ b/wpkg/libtld/CMakeLists.txt
@@ -83,7 +83,7 @@ if( MSVC )
     set_target_properties( ${PROJECT_NAME} PROPERTIES
         LINK_FLAGS ${WIN_MACHINE_FLAGS}
     )
-elseif( NOT MO_CYGWIN AND NOT MO_MINGW32 )
+elseif( NOT MO_CYGWIN AND NOT MO_MINGW )
     # We need the -fPIC to use this library as extension of PHP, etc.
     set_target_properties(${PROJECT_NAME} PROPERTIES
             COMPILE_FLAGS -fPIC
diff --git a/wpkg/tools/CMakeLists.txt b/wpkg/tools/CMakeLists.txt
index 13c095a..d2f197e 100644
--- a/wpkg/tools/CMakeLists.txt
+++ b/wpkg/tools/CMakeLists.txt
@@ -264,11 +264,11 @@ target_link_libraries( ${PROJECT_NAME}
     wpkg_tld_static
 )

-if( MINGW32 OR MSYS )
+if( MINGW OR MSYS )
     # The -static-... flags do not seem to have an effect at this point
     # (I also tried with just -static and the C & C++ libraries are still added!)
     set_target_properties(wpkg PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++" )
-endif( MINGW32 OR MSYS )
+endif( MINGW OR MSYS )

 install(
     TARGETS ${PROJECT_NAME}
diff --git a/wpkg/tools/wpkg.cpp b/wpkg/tools/wpkg.cpp
index 857c5d3..59aeee4 100644
--- a/wpkg/tools/wpkg.cpp
+++ b/wpkg/tools/wpkg.cpp
@@ -5099,7 +5099,7 @@ void display_pkgconfig(command_line& cl, const std::string& field_name, const st

     std::string paths(wpkg_util::utf8_getenv("PKG_CONFIG_PATH", ""));
     std::vector<std::string> path_list;
-#if defined(MO_WINDOWS) || defined(MO_MINGW32)
+#if defined(MO_WINDOWS) || defined(MO_MINGW)
     const char sep(';');
 #else
     const char sep(':');
@@ -7161,7 +7161,7 @@ int main(int argc, char *argv[])
     return g_output.exit_code();
 }

-#if defined(MO_WINDOWS) && !defined(MO_MINGW32)
+#if defined(MO_WINDOWS) && !defined(MO_MINGW)
 int wmain(int argc, wchar_t *wargv[])
 {
     // transform the wchar_t strings to UTF-8 strings
@@ -7194,7 +7194,7 @@ int wmain(int argc, wchar_t *wargv[])
 }
 #endif

-#ifdef MO_MINGW32
+#ifdef MO_MINGW
 int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLine, int nCmdShow)
 {
     int argc;
--
2.1.2
